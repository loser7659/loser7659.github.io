<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>程序员的酒后真言-后续节选</title>
      <link href="posts/47724.html"/>
      <url>posts/47724.html</url>
      
        <content type="html"><![CDATA[<p>关于编程语言：</p><ul><li>我曾经讨厌一种编程语言 (C#)，直到我开始使用它。现在我讨厌它，但认为它很有用。</li><li>然后我开始讨厌一种编程语言 (C#)，然后离开它又回来了。哇，那个编程语言真的改进了。</li><li>函数式语言最伟大的地方在于，函数是一流的，所有其他程序员都知道这一点。</li><li>无论一种语言多么伟大或优越，人们不使用它都没有关系。</li><li>学习一门语言并不难。它正在学习生态系统。</li></ul><p>关于同事</p><ul><li>结对编程很棒，只是需要很多时间——公司通常不想花的时间。</li><li>与聪明的工程师一起工作使我成为一个更好的编码员。与聪明的非技术同事一起工作使我成为一名更好的工程师。</li><li>不要把时间花在朝九晚五之外的工作上。除非你想因为你有一个很棒的项目并且你处于最佳状态。那玩意儿太棒了</li><li>跨团队的欢乐时光和社交时光 99% 只是让人不寒而栗并结识同事。这很酷。每隔一段时间，1% 是关于一个带有关键代码的关键项目，你很高兴你在社交环境中提出工作，否则狗屎会打击粉丝。我并不是说我应该因此而在工作之外与其他团队一起出去玩。我只想结缘。但它确实是一个不错的福利。</li></ul><p>关于在家工作</p><ul><li>如果公司一半偏远一半在现场，那么确定偏远地区的人是否不被视为二等公民就很重要。如果重大决定是“在饮水机上”做出的，那么最好尝试改变公司文化（努力）或转移到另一家将远程员工视为一等公民的公司。</li><li>在家工作的第二大缺点是没有白板。</li><li>在家工作的第一个主要缺点是很难向同事学习。除非我 (a) 有信心和果断地提出问题，并且 (b) 公司的文化是远程员工等同于现场员工，否则我认为我最好在前 5 年在一边工作我的事业。</li></ul><p>关于技术</p><ul><li>每个人都知道技术会发生变化。过去 10 年的技术格局发生了巨大变化。但是基本面变化不大，尤其是适用于我的领域的基本面。</li><li>黑客新闻和<a href="https://old.reddit.com/r/programming">/r/programming</a>仅有助于获得一般性想法并保持最新状态。评论几乎一文不值。</li><li>有很多声乐爱好者对技术有着强烈的看法。即使是业余爱好者也发表在“受人尊敬的”期刊和博客上。我发现它是为了跟上谣言，但为了自己解决问题。</li><li>我在一家尖端创业公司工作，我们不使用 ABC 尖端科技公司提供的最新 XYZ 技术。事实证明，他们通常提供的只是工程部门的一小部分，而且他们中的大多数人使用的技术与我们相同。</li><li>话虽如此，阅读标志很重要。如果您想使用现代技术，并且您的公司仍在使用 jQuery 进行大部分开发，那么可能是时候重新评估了。</li></ul><p>关于数据工程</p><ul><li>他妈的我是一名数据工程师，所以我不妨提供更具体的、有针对性的建议/经验</li><li>SQL 为王。MySQL、Postgres、Oracle、SQL Server、SQLite 等数据库仍然是至高无上的。即使你使用新技术，大部分还是会转移。</li><li>大多数公司没有做流媒体。这既困难又复杂。如果您的职业生涯已有 10 年，但您不知道如何处理每秒 10k 条记录，请不要担心，仍有工作机会等着您。</li><li>气流很糟糕，是的。还有其他产品，但如果 Airflow 不是最广泛使用的，那我操。</li><li>机器学习项目极易失败。它们很复杂且难以实施。不相信我？为机器学习模型编写该死的单元测试有多容易？是的。</li><li>我们的领域是新的。没有关于数据工程的好书，就去“做”吧。不能通过训练营和狗屎来学习它。这可能会在 10 年后改变，因为我们都会弄清楚我们在做什么。</li></ul><p>生活</p><ul><li>人死了。你想让你的代码成为你的遗产吗？如果是的话，那么花很多时间在上面，因为那是你他妈的遗产，你去吧！但如果你像我一样，你的遗产被家人、朋友和生活中的人包围着，而不是你写的代码。所以不要太在意它。</li><li>好人写的都是烂代码。聪明的人写的代码很烂。优秀的程序员和优秀的工程师会写出糟糕的代码。不要让代码质量成为你自我价值的因变量。</li><li>我进入技术和编码是因为技术是我的爱好。现在我的爱好和工作一样，工作毁了我的爱好。所以现在如果我想享受技术，我需要放弃我的爱好。或者我需要确定技术不再是我的爱好并找到新的爱好。</li><li>编程和计算机科学就像，什么，80 岁？将其与任何其他工程学科进行比较。是的，我们集体不知道我们在做什么。</li><li>我挣的钱还不错。心存感激和欣赏。还有，省。</li></ul><p>其他狗屎</p><ul><li>多年来，我构建了供多个团队和人员使用的大型平台和库。然而出于某种原因，我对自己编写的代码感到最自豪的是我使用的小脚本。</li><li>我职业生涯中最自豪的成就是帮助其他人更好地完成工作。那可能是因为我注定要成为人事经理，所以这可能对其他人没有帮助。</li><li>当我找工作时，我创建了一个更新的 Linkedin。我收到了垃圾回复并删除了它。现在我使用 Linkedin 寻找其他候选人加入我的公司。归根结底，Linkedin 噪音很大。我只是觉得它很有价值，因为现在，我的部分工作就是制造噪音。</li><li>有一次，我在大学里发现一个女孩喜欢我。我不相信，因为我自尊心很差，但后来她约我出去。我告诉她我不感兴趣，尽管她真的很酷。那是我生命中最自豪的时刻之一，因为我在 19 岁时已经足够成熟，可以用成熟的方式说“不”。</li><li><a href="https://old.reddit.com/r/cscareerquestions">/r/cscareerquestions</a>是一个充满自我和错误信息的污水池，我不知道该怎么办。比如，WTF。我想动摇所有这些人，并试图向他们解释世界的真相，但他们不相信我。</li></ul><p>关于我现在的总体感受</p><ul><li>我喝醉了，我通常不喝酒，所以我会认为我说的一切都可能是卑鄙的或可怕的</li><li>我强烈认为人们应该储蓄和投资。如果您有 6 位数的薪水，请尽最大努力将您的 401k 最大化。</li><li>我变成了我一直讨厌的人：在职业生涯中从事科技工作但在现实生活中避开科技的人。也许这伴随着变老。</li><li><a href="https://old.reddit.com/r/ExperiencedDevs">/r/ExperiencedDevs</a>是一个非常酷的社区。谢谢模组。你得到的赞赏比你应得的要少。说真的，谢谢。</li><li>我的职业、薪水和生活可能都归功于 Reddit。Reddit 有很多废话，但这里的社区让我摆脱了贫困（在加油站工作赚取最低工资），学习 Linux、SQL、python、C#、Python 和其他语言，让我走到了现在的位置。</li><li>孩子们很棒。我没有选择要孩子。为什么？因为我喜欢孩子，我害怕我会成为什么样的父亲。哦，该死，在这里发帖太私人了？</li><li>有一次，有人问我仰慕谁，我说是柯南奥布莱恩，他们嘲笑我。但我很严肃，因为在<a href="https://www.youtube.com/watch?v=AcF1OoWqXBc">他今晚秀的最后一场演出中</a>，他告诉他的听众要善良，努力工作。它发生在我生命中的艰难时期，当我看到他这么说时，我说，你知道吗，我会那样做。因为我会失去什么？你知道吗？我遇到了一些我从超过 10 年的时间里学到的聪明人，因为我对他们很好。通过努力工作和不害怕尝试新事物，我成长了很多。因为这些话，我的生活无限、无限地美好。所以，是的，说我因为深夜脱口秀而获得了一定程度的满足感，这似乎很愚蠢甚至可笑。但是你知道吗，去他妈的，这是我的生活，我会自豪地说，我所取得的任何成功都归功于深夜电视上的一部该死的漫画。</li></ul><p>我醉了，所以请无视我说的任何话。也为吐槽道歉。</p>]]></content>
      
      
      <categories>
          
          <category> 记一件事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序员 </tag>
            
            <tag> 酒后真言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员的酒后真言</title>
      <link href="posts/37400.html"/>
      <url>posts/37400.html</url>
      
        <content type="html"><![CDATA[<p>美国最大的论坛 Reddit，最近有一个热帖。</p><p>一个程序员说自己喝醉了，软件工程师已经当了10年，心里有好多话想说，我可能会后悔今天说了这些话。<br>他洋洋洒洒写了一大堆，获得9700多个赞。内容很有意思，值得一读，下面是节选。<br><img src="./medias/detail/load.gif" data-original="https://cdn.beekka.com/blogimg/asset/202106/bg2021062801.jpg"></p><p>（1）职业发展的最好方法是换公司。</p><p>（2）技术栈不重要。技术领域有大约 10-20 条核心原则，重要的是这些原则，技术栈只是落实它们的方法。你如果不熟悉某个技术栈，不需要过度担心。</p><p>（3）工作和人际关系是两回事。有一些公司，我交到了好朋友，但是工作得并不开心；另一些公司，我没有与任何同事建立友谊，但是工作得很开心。</p><p>（4）我总是对经理实话实说。怕什么？他开除我？我会在两周内找到一份新工作。</p><p>（5）如果一家公司的工程师超过 100 人，它的期权可能在未来十年内变得很有价值。对于工程师人数很少的公司，期权一般都是毫无价值。</p><p>（6）好的代码是初级工程师可以理解的代码。伟大的代码可以被第一年的 CS 专业的新生理解。</p><p>（7）作为一名工程师，最被低估的技能是记录。说真的，如果有人可以教我怎么写文档，我会付钱，也许是 1000 美元。</p><p>（8）网上的口水战，几乎都无关紧要，别去参与。</p><p>（9）如果我发现自己是公司里面最厉害的工程师，那就该离开了。</p><p>（10）我们应该雇佣更多的实习生，他们很棒。那些精力充沛的小家伙用他们的想法乱搞。如果他们公开质疑或批评某事，那就更好了。我喜欢实习生。</p><p>（11）技术栈很重要。如果你使用 Python 或 C++ 语言，就会忍不住想做一些非常不同的事情。因为某些工具确实擅长某些工作。</p><p>（12）如果你不确定自己想做什么东西，请使用 Java。这是一种糟糕的编程语言，但几乎无所不能。</p><p>（13）对于初学者来说，最赚钱的编程语言是 SQL，干翻所有其他语言。你只了解 SQL 而不会做其他事情，照样赚钱。人力资源专家的年薪？也许5万美元。懂 SQL 的人力资源专家？9万美元。</p><p>（14）测试很重要，但 TDD （测试驱动的开发）几乎变成了一个邪教。</p><p>（15） 政府单位很轻松，但并不像人们说的那样好。对于职业生涯早期到中期的工程师，12 万美元的年薪 + 各种福利 + 养老金听起来不错，但是你将被禁锢在深奥的专用工具里面，离开政府单位以后，这些知识就没用了。我非常尊重政府工作人员，但说真的，这些地方的工程师，年龄中位数在 50 岁以上是有原因的。</p><p>（16）再倒一杯酒。</p><p>（17）大多数头衔都无关紧要，随便什么公司都可以有首席工程师。</p><p>（18）手腕和背部的健康问题可不是开玩笑的，好的设备值得花钱。</p><p>（19）当一个软件工程师，最好的事情是什么？你可以结识很多想法相同的人，大家互相交流，不一定有相同的兴趣，但是对方会用跟你相同的方式思考问题，这很酷。</p><p>（20）有些技术太流行，我不得不用它。我心里就会很讨厌这种技术，但会把它推荐给客户，比如我恨 Jenkins，但把它推荐给新客户，我不觉得做错了。</p><p>（21）成为一名优秀的工程师意味着了解最佳实践，成为高级工程师意味着知道何时打破最佳实践。</p><p>（22）发生事故时，如果周围的人试图将责任归咎于外部错误或底层服务中断，那么是时候离开这家公司，继续前进了。</p><p>（23）我遇到的最好的领导，同意我的一部分观点，同时耐心跟我解释，为什么不同意我的另一部分观点。我正在努力成为像他们一样的人。</p><p>（24）算法和数据结构确实重要，但不应该无限夸大，尤其是面试的时候。我没见过药剂师面试时，还要测试有机化学的细节。这个行业的面试过程有时候很糟糕。</p><p>（25）做自己喜欢的事情并不重要，不要让我做讨厌的事情更重要。</p><p>（26）越接近产品，就越接近推动收入增长。无论工作的技术性如何，只要它接近产品，我都感到越有价值。</p><p>（27）即使我平时用 Windows 工作，Linux 也很重要。为什么？因为服务器是 Linux 系统，你最终在 Linux 系统上工作。</p><p>（28）人死了以后，你想让代码成为你的遗产吗？如果是那样，就花很多时间在代码上面吧，因为那是你的遗产。但是，如果你像我一样，更看重与家人、朋友和生活中其他人相处的时光，而不是写的代码，那就别对它太在意。</p><p>（29）我挣的钱还不错，对此心存感激，但还是需要省钱。</p><p>（30）人死了以后，你想让代码成为你的遗产吗？如果是那样，就花很多时间在代码上面吧，因为那是你的遗产。但是，如果你像我一样，更看重与家人、朋友和生活中其他人相处的时光，而不是写的代码，那就别对它太在意。</p><p>（31）糟糕，我没酒了。</p><p>   <strong>// 以下为后面更新的节选</strong></p><ul><li><p>测试很重要，但 TDD 是一个该死的邪教。</p></li><li><p>我的自我价值不是我的总薪酬的函数或相关联。资本主义是一种确定自我价值的糟糕方式。</p></li><li><p>我从来没有真正开始讨厌一种语言或技术，直到我开始非常熟悉它。另外，如果我讨厌某项技术，我认为它很好，但同时我会向客户推荐它。他妈的詹金斯，但我不认为我会通过向新客户推荐它来解决软件不当行为。</p></li><li><p>说到头衔：在你职业生涯的早期，头衔的变化很好。初中到中。中高级。高级领导。后来在你的职业生涯，标题的变化<em>下</em>都不错。这样，您可以获得相同的补偿，但在您升职时会获得增加。换句话说，在你职业生涯的早期（&lt;10 年），头衔改变 UP 是好的，因为它可以让你发展你的技能和责任。后来，头衔的变化很好，因为它可以让你增加薪水。</p></li><li><p>话虽如此，git 很糟糕，我只能选择使用它。此外，GUI git 工具可以下地狱，任何一天都给我命令行。大概有 7 个命令行需要记住，其他的都可以用 google 搜索。</p></li><li><p>成为一名优秀的工程师意味着了解最佳实践。成为高级工程师意味着知道何时打破最佳实践。</p></li><li><p>如果人们试图将责任归咎于错误或中断，那么是时候继续前进了。</p></li><li><p>算法和数据限制在某种程度上很重要。我没有看到药剂师面试测试关于有机化学的琐事。我们行业的面试过程出了点问题。</p></li><li><p>即使我在所有 Windows 中工作，Linux 也很重要。为什么？因为我最终在 Linux 工作。很高兴那些周末我忙着安装 Arch。</p></li><li><p>我已经学会对大数据等模棱两可的流行词保持警惕。WTF是“大”数据吗？我在 Spark 和 Kafka 中每 10 分钟处理 10k 行流，并在 Python 和 MySQL 中每小时处理 1B 行。那些标签可以去他妈的自己。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序员 </tag>
            
            <tag> reddit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个idea启动报错问题</title>
      <link href="posts/23565.html"/>
      <url>posts/23565.html</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>昨天打开idea时候莫名其妙弹出一个报错框 进入官方链接大概看了一下</p><p><img src="./medias/detail/load.gif" data-original="https://echol.cn/wp-content/uploads/2021/08/1630228345802.png" alt="1630228345802.png" title="1630228345802.png"></p><h1 id="官方解决方案"><a href="#官方解决方案" class="headerlink" title="官方解决方案"></a>官方解决方案</h1><p><img src="./medias/detail/load.gif" data-original="https://echol.cn/wp-content/uploads/2021/08/1630228634388.png" alt="1630228634388.png" title="1630228634388.png"></p><p>出现这个界面有可能是插件损坏或不兼容、IDE 安装文件损坏、补丁更新失败、缓存损坏或配置损坏</p><p>因为我最近都没有动过idea的配置以及插件 所以看到这个报错 <strong>java.net.BindException: Address already in use: bind</strong></p><p>跳转到另一个帖子看了一下解决方案</p><p><strong>变通方法</strong>：在管理员控制台 (cmd.exe) 中运行以下命令：</p><pre class="line-numbers language-none"><code class="language-none">netsh int ipv4 set dynamicport tcp start=49152 num=16383netsh int ipv4 set dynamicport udp start=49152 num=16383<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果以上没有帮助，请尝试以下命令：</p><pre class="line-numbers language-none"><code class="language-none">net stop winnatnet start winnat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="./medias/detail/load.gif" data-original="https://echol.cn/wp-content/uploads/2021/08/1630228863567.png" alt="1630228863567.png" title="1630228863567.png"></p><p><img src="./medias/detail/load.gif" data-original="https://echol.cn/wp-content/uploads/2021/08/1630228874317.png" alt="1630228874317.png" title="1630228874317.png"></p><p>在重启完Windows NAT Driver服务后 idea以及能正常打开了。</p><h1 id="导致原因"><a href="#导致原因" class="headerlink" title="导致原因"></a>导致原因</h1><p>除了前面说的插件损坏或不兼容、IDE 安装文件损坏、补丁更新失败、缓存损坏或配置损坏</p><p>还有可能就是如果 6942 和 6991 之间的所有 50 个端口都被保留，被其他应用程序占用或防火墙不允许 IDE 绑定它们，则启动失败</p><p>要锁定文件夹，IDE 正在 localhost 上启动服务器，它尝试绑定 6942 和 6991 之间的第一个可用端口，如果 IDE 无法绑定此范围内的任何端口，则会引发此异常。所有 50 个端口不太可能已经在一台机器上使用，因此它似乎是一个网络问题或某些安全软件不允许 IDE 绑定到这个范围内的任何端口，即使在本地主机接口上也是如此。</p><ul><li>增加默认范围（当前范围是从 6942 到 6991）</li><li>如果默认范围失败，请添加另一个具有更高端口号的范围</li><li>回退到特定于平台的锁定（Windows 上的互斥锁，Unix 上的套接字）</li><li>在 Windows 上，确保我们要使用的端口不在排除范围列表中<code>netsh interface ipv4 show excludedportrange protocol=tcp</code>。只有在默认范围失败的情况下，我们才能这样做，以免在其他情况下浪费时间进行检查。</li></ul><p>最好也提醒大家 做好备份！！！!</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云盘自动备份工具</title>
      <link href="posts/36146.html"/>
      <url>posts/36146.html</url>
      
        <content type="html"><![CDATA[<img class="alignnone size-medium wp-image-110" src="./medias/detail/load.gif" data-original="https://echol.cn/wp-content/uploads/2021/08/微信图片_20210830194054-300x225.png" alt="" width="800" height="600"><p>技术栈：<br>Java Swing + Hutool + Okhttp3</p><p>目前已完成功能:</p><ul>     <li>刷新Token：每小时刷新一次Token，避免token失效。</li>     <li>文件分类：支持按文件类型分类上传，按【文档、图片、视频、音乐等】</li>     <li>上传记忆：记录已经上传的文件，下次执行进行增量上传。</li>     <li>目录监控：监听当前需要备份的目录，产生新文件时自动上传新文件.</li>     <li>定时同步：开启程序后，每晚20:00 自动上传本地目录到【阿里云盘】</li></ul><blockquote>登录网页端阿里云盘后 控制台输入JSON.parse(localStorage.getItem('token')).refresh_token 即可获取Token网页端地址:<a href="https://www.aliyundrive.com/">https://www.aliyundrive.com/</a></blockquote>项目地址:<a href="https://gitee.com/loser7659/aliyunpan-autobackup.git">https://gitee.com/loser7659/aliyunpan-autobackup.git</a>]]></content>
      
      
      <categories>
          
          <category> 码一片天 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阿里云盘 </tag>
            
            <tag> 自动备份 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-Axios封装</title>
      <link href="posts/63249.html"/>
      <url>posts/63249.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-Axios简介"><a href="#1-Axios简介" class="headerlink" title="1. Axios简介"></a>1. Axios简介</h1><h2 id="1-1-什么是Axios"><a href="#1-1-什么是Axios" class="headerlink" title="1.1 什么是Axios"></a>1.1 什么是Axios</h2><p>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。</p><h2 id="1-2-特性"><a href="#1-2-特性" class="headerlink" title="1.2 特性"></a>1.2 特性</h2><ul><li>浏览器端发起XMLHttpRequests请求</li><li>node端发起http请求</li><li>支持Promise API</li><li>监听请求和返回</li><li>转化请求和返回</li><li>取消请求</li><li>自动转化json数据</li><li>客户端支持抵御</li></ul><h1 id="2-Axios的使用和配置"><a href="#2-Axios的使用和配置" class="headerlink" title="2. Axios的使用和配置"></a>2. Axios的使用和配置</h1><h2 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm install axios --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者使用cdn</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://unpkg.com/axios/dist/axios.min.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-2-基本使用"><a href="#2-2-基本使用" class="headerlink" title="2.2 基本使用"></a>2.2 基本使用</h2><h3 id="2-2-1-Get请求"><a href="#2-2-1-Get请求" class="headerlink" title="2.2.1 Get请求"></a>2.2.1 Get请求</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  params<span class="token operator">:</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token string">'krislin'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-2-Post请求"><a href="#2-2-2-Post请求" class="headerlink" title="2.2.2 Post请求"></a>2.2.2 Post请求</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    name<span class="token operator">:</span><span class="token string">'krislin'</span><span class="token punctuation">,</span>    address<span class="token operator">:</span><span class="token string">'china'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-3-并发操作"><a href="#2-2-3-并发操作" class="headerlink" title="2.2.3 并发操作"></a>2.2.3 并发操作</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getUserAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user/12345'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getUserPermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user/12345/permissions'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>axios<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">getUerAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">getUserPermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>axios<span class="token punctuation">.</span><span class="token function">spread</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span>pers</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//两个请求现在都完成</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-请求API配置"><a href="#2-3-请求API配置" class="headerlink" title="2.3 请求API配置"></a>2.3 请求API配置</h2><p>axios 能够在进行请求时进行一些设置，具体如下:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    method<span class="token operator">:</span><span class="token string">'post'</span><span class="token punctuation">,</span>    url<span class="token operator">:</span><span class="token string">'/user/12345'</span><span class="token punctuation">,</span>    data<span class="token operator">:</span><span class="token punctuation">{</span>        name<span class="token operator">:</span><span class="token string">'krislin'</span><span class="token punctuation">,</span>        address<span class="token operator">:</span><span class="token string">'china'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-4-请求设置"><a href="#2-4-请求设置" class="headerlink" title="2.4 请求设置"></a>2.4 请求设置</h2><p>请求配置中，只有url是必须的，如果没有指明的话，默认是Get请求</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span>    <span class="token comment">//`url`是服务器链接，用来请求用</span>    url<span class="token operator">:</span><span class="token string">'/user'</span><span class="token punctuation">,</span>     <span class="token comment">//`method`是发起请求时的请求方法</span>    method<span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">get</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>     <span class="token comment">//`baseURL`如果`url`不是绝对地址，那么将会加在其前面。</span>    <span class="token comment">//当axios使用相对地址时这个设置非常方便</span>    <span class="token comment">//在其实例中的方法</span>    baseURL<span class="token operator">:</span><span class="token string">'http://some-domain.com/api/'</span><span class="token punctuation">,</span>     <span class="token comment">//`transformRequest`允许请求的数据在传到服务器之前进行转化。</span>    <span class="token comment">//这个也支持`PUT`,`GET`,`PATCH`方法。</span>    <span class="token comment">//数组中的最后一个函数必须返回一个字符串，一个`ArrayBuffer`,或者`Stream`</span>    transformRequest<span class="token operator">:</span><span class="token punctuation">[</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//依自己的需求对请求数据进行处理</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token comment">//`transformResponse`允许返回的数据传入then/catch之前进行处理</span>    transformResponse<span class="token operator">:</span><span class="token punctuation">[</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//依需要对数据进行处理</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token comment">//`headers`是自定义的要被发送的头信息</span>    headers<span class="token operator">:</span><span class="token punctuation">{</span><span class="token string">'X-Requested-with'</span><span class="token operator">:</span><span class="token string">'XMLHttpRequest'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment">//`params`是请求连接中的请求参数，必须是一个纯对象，或者URLSearchParams对象</span>    params<span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token constant">ID</span><span class="token operator">:</span><span class="token number">12345</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment">//`paramsSerializer`是一个可选的函数，是用来序列化参数</span>    <span class="token comment">//例如：（https://ww.npmjs.com/package/qs,http://api.jquery.com/jquery.param/)</span>    <span class="token function-variable function">paramsSerializer</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> Qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span><span class="token punctuation">{</span>arrayFormat<span class="token operator">:</span><span class="token string">'brackets'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment">//`data`是请求提需要设置的数据</span>    <span class="token comment">//只适用于应用的'PUT','POST','PATCH'，请求方法</span>    <span class="token comment">//当没有设置`transformRequest`时，必须是以下其中之一的类型（不可重复？）：</span>    <span class="token comment">//-string,plain object,ArrayBuffer,ArrayBufferView,URLSearchParams</span>    <span class="token comment">//-仅浏览器：FormData,File,Blob</span>    <span class="token comment">//-仅Node：Stream</span>    data<span class="token operator">:</span><span class="token punctuation">{</span>        firstName<span class="token operator">:</span><span class="token string">'fred'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">//`timeout`定义请求的时间，单位是毫秒。</span>    <span class="token comment">//如果请求的时间超过这个设定时间，请求将会停止。</span>    timeout<span class="token operator">:</span><span class="token number">1000</span><span class="token punctuation">,</span>        <span class="token comment">//`withCredentials`表明是否跨域请求，</span>    <span class="token comment">//应该是用证书</span>    withCredentials<span class="token operator">:</span><span class="token boolean">false</span> <span class="token comment">//默认值</span>     <span class="token comment">//`adapter`适配器，允许自定义处理请求，这会使测试更简单。</span>    <span class="token comment">//返回一个promise，并且提供验证返回（查看[response docs](#response-api)）</span>    <span class="token function-variable function">adapter</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">/*...*/</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment">//`auth`表明HTTP基础的认证应该被使用，并且提供证书。</span>    <span class="token comment">//这个会设置一个`authorization` 头（header），并且覆盖你在header设置的Authorization头信息。</span>    auth<span class="token operator">:</span><span class="token punctuation">{</span>        username<span class="token operator">:</span><span class="token string">'janedoe'</span><span class="token punctuation">,</span>        password<span class="token operator">:</span><span class="token string">'s00pers3cret'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment">//`responsetype`表明服务器返回的数据类型，这些类型的设置应该是</span>    <span class="token comment">//'arraybuffer','blob','document','json','text',stream'</span>    responsetype<span class="token operator">:</span><span class="token string">'json'</span><span class="token punctuation">,</span>     <span class="token comment">//`xsrfHeaderName` 是http头（header）的名字，并且该头携带xsrf的值</span>    xrsfHeadername<span class="token operator">:</span><span class="token string">'X-XSRF-TOKEN'</span>，<span class="token comment">//默认值</span>     <span class="token comment">//`onUploadProgress`允许处理上传过程的事件</span>    <span class="token function-variable function">onUploadProgress</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">progressEvent</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//本地过程事件发生时想做的事</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment">//`onDownloadProgress`允许处理下载过程的事件</span>    <span class="token function-variable function">onDownloadProgress</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">progressEvent</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//下载过程中想做的事</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment">//`maxContentLength` 定义http返回内容的最大容量</span>    maxContentLength<span class="token operator">:</span> <span class="token number">2000</span><span class="token punctuation">,</span>     <span class="token comment">//`validateStatus` 定义promise的resolve和reject。</span>    <span class="token comment">//http返回状态码，如果`validateStatus`返回true（或者设置成null/undefined），promise将会接受；其他的promise将会拒绝。</span>    <span class="token function-variable function">validateStatus</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">status</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> stauts <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">;</span><span class="token comment">//默认</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment">//`httpAgent` 和 `httpsAgent`当产生一个http或者https请求时分别定义一个自定义的代理，在nodejs中。</span>    <span class="token comment">//这个允许设置一些选选个，像是`keepAlive`--这个在默认中是没有开启的。</span>    httpAgent<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">http<span class="token punctuation">.</span>Agent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>keepAlive<span class="token operator">:</span>treu<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    httpsAgent<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">https<span class="token punctuation">.</span>Agent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>keepAlive<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment">//`proxy`定义服务器的主机名字和端口号。</span>    <span class="token comment">//`auth`表明HTTP基本认证应该跟`proxy`相连接，并且提供证书。</span>    <span class="token comment">//这个将设置一个'Proxy-Authorization'头(header)，覆盖原先自定义的。</span>    proxy<span class="token operator">:</span><span class="token punctuation">{</span>        host<span class="token operator">:</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">,</span>        port<span class="token operator">:</span><span class="token number">9000</span><span class="token punctuation">,</span>        auth<span class="token operator">:</span><span class="token punctuation">{</span>            username<span class="token operator">:</span><span class="token string">'cdd'</span><span class="token punctuation">,</span>            password<span class="token operator">:</span><span class="token string">'123456'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment">//`cancelTaken` 定义一个取消，能够用来取消请求</span>    <span class="token comment">//（查看 下面的Cancellation 的详细部分）</span>    cancelToke<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">CancelToken</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">cancel</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-5-响应数据Response"><a href="#2-5-响应数据Response" class="headerlink" title="2.5 响应数据Response"></a>2.5 响应数据Response</h2><p>一个请求的返回包含以下信息</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span>    <span class="token comment">//`data`是服务器的提供的回复（相对于请求）</span>    data<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment">//`status`是服务器返回的http状态码</span>    status<span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">,</span>      <span class="token comment">//`statusText`是服务器返回的http状态信息</span>    statusText<span class="token operator">:</span> <span class="token string">'ok'</span><span class="token punctuation">,</span>     <span class="token comment">//`headers`是服务器返回中携带的headers</span>    headers<span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment">//`config`是对axios进行的设置，目的是为了请求（request）</span>    config<span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-6-拦截器Interceptors"><a href="#2-6-拦截器Interceptors" class="headerlink" title="2.6 拦截器Interceptors"></a>2.6 拦截器Interceptors</h2><p>你可以在 请求 或者 返回 被 then 或者 catch 处理之前对他们进行拦截。</p><p>添加拦截器:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//添加一个请求拦截器</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//在请求发送之前做一些事</span>    <span class="token keyword">return</span> config<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//当出现请求错误是做一些事</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加一个返回拦截器</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//对返回的数据进行一些处理</span>    <span class="token keyword">return</span> response<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//对返回的错误进行一些处理</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>移除拦截器：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> myInterceptor <span class="token operator">=</span> axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>rquest<span class="token punctuation">.</span><span class="token function">eject</span><span class="token punctuation">(</span>myInterceptor<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="3-跨域"><a href="#3-跨域" class="headerlink" title="3. 跨域"></a>3. 跨域</h1><p>因为在Vue的开发阶段，基本都是用webpack打包编译，需要node环境本地运行，因而运行的域名为本地的localhost,这个时候调用后端接口就涉及到跨域的问题了。</p><h2 id="3-1-ProxyTable"><a href="#3-1-ProxyTable" class="headerlink" title="3.1 ProxyTable"></a>3.1 ProxyTable</h2><p>vue 的 proxyTable 是用于开发阶段配置跨域的工具，可以同时配置多个后台服务器跨越请求接口，其真正依赖的npm包是 <a href="https://github.com/chimurai/http-proxy-middleware">http-proxy-middleware</a>, 在GitHub上拥有更丰富的配置，可以按需配置</p><p><strong>在不考虑后端CROS跨域方案的情况下，前端配置ProxyTable实现跨域请求的用法如下:</strong></p><h3 id="1-找到-config-index-js-文件中的-proxyTable-将其修改"><a href="#1-找到-config-index-js-文件中的-proxyTable-将其修改" class="headerlink" title="1. 找到 config/index.js 文件中的 proxyTable:{} 将其修改"></a>1. 找到 <strong>config/index.js</strong> 文件中的 <code>proxyTable:{}</code> 将其修改</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">  proxyTable<span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token string">'/api'</span><span class="token operator">:</span> <span class="token punctuation">{</span>    target<span class="token operator">:</span> <span class="token string">'https://tasst.sinoxk.cn'</span><span class="token punctuation">,</span> <span class="token comment">// 这个是你要代理的地址(开发阶段接口地址)</span>    changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//跨域需要加上这个</span>    pathRewrite<span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token string">'^/api'</span><span class="token operator">:</span> <span class="token string">''</span> <span class="token comment">//可以理解为用 / api代表target里的地址</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>proxyTable支持配置多个接口:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">  proxyTable<span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token string">'/api'</span><span class="token operator">:</span> <span class="token punctuation">{</span>    target<span class="token operator">:</span> <span class="token string">'https://tasst.sinoxk.cn'</span><span class="token punctuation">,</span> <span class="token comment">// 这个是你要代理的地址(开发阶段接口地址)</span>    changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//跨域需要加上这个</span>    pathRewrite<span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token string">'^/api'</span><span class="token operator">:</span> <span class="token string">''</span> <span class="token comment">//可以理解为用 / api代表target里的地址</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token string">'/service'</span><span class="token operator">:</span> <span class="token punctuation">{</span>    target<span class="token operator">:</span> <span class="token string">'https://tasst.sinoxk.cn'</span><span class="token punctuation">,</span> <span class="token comment">// 这个是你要代理的地址(开发阶段接口地址)</span>    changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//跨域需要加上这个</span>    pathRewrite<span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token string">'^/service'</span><span class="token operator">:</span> <span class="token string">''</span> <span class="token comment">//可以理解为用 / api代表target里的地址</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-找到-config-dev-env-js-文件-配置BASE-URL"><a href="#2-找到-config-dev-env-js-文件-配置BASE-URL" class="headerlink" title="2. 找到 config/dev.env.js 文件,配置BASE_URL"></a>2. 找到 <strong>config/dev.env.js</strong> 文件,配置<code>BASE_URL</code></h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>prodEnv<span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token constant">NODE_ENV</span><span class="token operator">:</span> <span class="token string">'"development"'</span><span class="token punctuation">,</span>  <span class="token constant">BASE_URL</span><span class="token operator">:</span><span class="token string">'"/api"'</span>  <span class="token comment">//开发环境域名</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-找到-config-prod-env-js-文件-配置BASE-URL"><a href="#3-找到-config-prod-env-js-文件-配置BASE-URL" class="headerlink" title="3. 找到 config/prod.env.js 文件,配置BASE_URL"></a>3. 找到 <strong>config/prod.env.js</strong> 文件,配置<code>BASE_URL</code></h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token constant">NODE_ENV</span><span class="token operator">:</span> <span class="token string">'"production"'</span><span class="token punctuation">,</span>  <span class="token constant">BASE_URL</span><span class="token operator">:</span><span class="token string">'"https://asst.sinoxk.com"'</span> <span class="token comment">//生产环境保持正式域名</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-配置-axios-的基础域名"><a href="#4-配置-axios-的基础域名" class="headerlink" title="4. 配置 axios 的基础域名"></a>4. 配置 <strong>axios</strong> 的基础域名</h3><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">axios.defaults.baseURL</span> <span class="token punctuation">=</span> <span class="token attr-value">process.env.BASE_URL</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>修改完所有的配置文件后，要注意，需要重启下环境</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm run dev / npm run start <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="4-封装"><a href="#4-封装" class="headerlink" title="4. 封装"></a>4. 封装</h1><p>在日常项目开发过程中，在和后台交互获取数据的时候，我们都需要使用到网络库，通常在vue的项目中 ，使用的是 <strong>axios</strong> 库 ，在此基于自身项目业务，做一个二次封装。</p><h2 id="4-1-条件准备"><a href="#4-1-条件准备" class="headerlink" title="4.1 条件准备"></a>4.1 条件准备</h2><p>在UI轻提示组件上，选定的是 <strong>vant</strong> 库中的 <strong>Toast</strong> 组件(<a href="https://youzan.github.io/vant/#/zh-CN/intro">Vant文档</a>),可按实际需要选定具体要使用的UI框架</p><p> 安装: </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm install vant --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>数据序列化，如果有实际需要的项目，可以使用<code>qs</code>,在这里做一个简单的介绍</p><p> 安装: </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm install qs --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>qs.stringify和JSON.stringify的使用和区别</strong></p><p>qs.stringify()将对象 序列化成URL的形式，以&amp;进行拼接</p><p>JSON.stringify 是将对象转化成一个json字符串的形式</p><p><strong>用法:</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">'xiaoming'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">}</span>qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//log: 'name=xiaoming&amp;age=10'</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">//log: '{"name":"hehe","age":10}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基于底层配置和业务接口分离，在src目录中会新建文件夹 <strong>httpServer</strong>,同时新建立 <strong>ajax.js</strong> 和 <strong>api.js</strong> 文件</p><pre class="line-numbers language-none"><code class="language-none">ajax.js: axios的二次封装，作为基础网络库，添加基础的配置<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">api.js: 管理项目实际业务基础接口的输出，以及返回响应数据的处理<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在日常项目模块中，基于多人开发，当然可以在api.js的基础上，可以根据功能模块实现业务拓展延伸，比如</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">小明负责list模块业务新建api<span class="token operator">-</span>list<span class="token punctuation">.</span>js，并导入api<span class="token punctuation">.</span>js <span class="token operator">...</span><span class="token punctuation">.</span> <span class="token comment">//api-list.js文件中:</span><span class="token keyword">import</span> api <span class="token keyword">from</span> <span class="token string">'./api'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">getList</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span>params</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        api<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>params<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于个别项目，可能存在多个域名配置的情况下, 可以重新建立 <strong>base.js</strong> , 来管理多个接口域名</p><p><strong>base.js:</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 接口域名的管理 */</span><span class="token keyword">const</span> base <span class="token operator">=</span> <span class="token punctuation">{</span>  sq<span class="token operator">:</span> <span class="token string">'https://xxxx111111.com/api/v1'</span><span class="token punctuation">,</span>  bd<span class="token operator">:</span> <span class="token string">'http://xxxxx22222.com/api'</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> base<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-2-axios封装-单域名"><a href="#4-2-axios封装-单域名" class="headerlink" title="4.2 axios封装(单域名)"></a>4.2 axios封装(单域名)</h2><p><strong>src/main.js文件:</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token keyword">import</span> Api <span class="token keyword">from</span> <span class="token string">'./httpServer/api'</span><span class="token comment">//挂载到vue的全局属性上</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$https <span class="token operator">=</span> ApiVue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  router<span class="token punctuation">,</span>  components<span class="token operator">:</span> <span class="token punctuation">{</span> App <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token operator">:</span> <span class="token string">'&lt;App/&gt;'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>src/httpServer/ajax.js文件:</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">import</span> <span class="token punctuation">{</span>Toast<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vant'</span><span class="token keyword">const</span> ajax <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     timeout<span class="token operator">:</span><span class="token number">60000</span><span class="token punctuation">,</span>     baseURL<span class="token operator">:</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">BASE_URL</span>   <span class="token comment">//基础域名</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">/** * 请求拦截器 * 每次请求前，如果存在token则在请求头中携带token */</span>ajax<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token parameter">config</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">//判断token(根据实际情况拦截)</span>       <span class="token keyword">return</span> config<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token parameter">error</span> <span class="token operator">=&gt;</span> Promise<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">/** * 响应拦截器 */</span>ajax<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token comment">// 请求成功</span>  <span class="token parameter">res</span> <span class="token operator">=&gt;</span> res<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span> <span class="token operator">?</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">:</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span>response<span class="token punctuation">}</span> <span class="token operator">=</span> error<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 请求已发出，但是不在2xx的范围</span>      <span class="token function">Toast</span><span class="token punctuation">(</span><span class="token punctuation">{</span>message<span class="token operator">:</span> response<span class="token punctuation">.</span>message<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment">// 处理断网的情况</span>      <span class="token comment">// eg:请求超时或断网时，更新state的network状态</span>      <span class="token comment">// network状态在app.vue中控制着一个全局的断网提示组件的显示隐藏</span>      <span class="token comment">// 关于断网组件中的刷新重新获取数据，会在断网组件中说明</span>      <span class="token function">Toast</span><span class="token punctuation">(</span><span class="token punctuation">{</span>message<span class="token operator">:</span> <span class="token string">'网络开小差，请稍后重试'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> ajax<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于<strong>process.env.BASE_URL</strong>的配置，在开发环境中，需要以代理的方式进行访问:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//config/dev.env.js</span><span class="token string">'use strict'</span><span class="token keyword">const</span> merge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-merge'</span><span class="token punctuation">)</span><span class="token keyword">const</span> prodEnv <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./prod.env'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>prodEnv<span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token constant">NODE_ENV</span><span class="token operator">:</span> <span class="token string">'"development"'</span><span class="token punctuation">,</span>  <span class="token constant">BASE_URL</span><span class="token operator">:</span><span class="token string">'"/api"'</span>  <span class="token comment">//对api进行处理</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//config/prod.env.js</span><span class="token string">'use strict'</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token constant">NODE_ENV</span><span class="token operator">:</span> <span class="token string">'"production"'</span><span class="token punctuation">,</span>  <span class="token constant">BASE_URL</span><span class="token operator">:</span><span class="token string">'"https://www.xxx.com"'</span> <span class="token comment">//生产环境不需要处理</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//config/index.js</span><span class="token operator">...</span>   proxyTable<span class="token operator">:</span> <span class="token punctuation">{</span>       <span class="token string">'/api'</span><span class="token operator">:</span> <span class="token punctuation">{</span>        target<span class="token operator">:</span> <span class="token string">'https://tasst.sinoxk.cn'</span><span class="token punctuation">,</span><span class="token comment">//后端接口地址</span>        changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//是否允许跨越</span>        pathRewrite<span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token string">'^/api'</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span><span class="token comment">//重写(接口地址带api会被替换)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token operator">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>src/httpServer/api.js文件:</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> ajax <span class="token keyword">from</span> <span class="token string">'./ajax'</span><span class="token keyword">import</span> <span class="token punctuation">{</span>Toast<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vant'</span><span class="token comment">/** *  业务接口成功或者失败的情况处理 * */</span><span class="token keyword">const</span> <span class="token function-variable function">handleResponse</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">res<span class="token punctuation">,</span> success<span class="token punctuation">,</span> failure</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">200</span><span class="token operator">:</span>   <span class="token comment">//成功</span>      success <span class="token operator">&amp;&amp;</span> <span class="token function">success</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">401</span><span class="token operator">:</span>   <span class="token comment">//登录token失效</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>failure<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">failure</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">Toast</span><span class="token punctuation">(</span><span class="token punctuation">{</span>message<span class="token operator">:</span>res<span class="token punctuation">.</span>msg <span class="token operator">||</span> <span class="token string">'请求失败，请稍后重试!'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> params<span class="token punctuation">,</span> success<span class="token punctuation">,</span> failure</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ajax<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>      params<span class="token operator">:</span> params    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">handleResponse</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">,</span> success<span class="token punctuation">,</span> failure<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function-variable function">post</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> params<span class="token punctuation">,</span> success<span class="token punctuation">,</span> failure</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ajax<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">handleResponse</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">,</span> success<span class="token punctuation">,</span> failure<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 码一片天 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> axios </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql常用优化方案</title>
      <link href="posts/23767.html"/>
      <url>posts/23767.html</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-的优化方案有哪些？"><a href="#MySQL-的优化方案有哪些？" class="headerlink" title="MySQL 的优化方案有哪些？"></a>MySQL 的优化方案有哪些？</h1><p>性能优化（Optimize）指的是在保证系统正确性的前提下，能够更快速响应请求的一种手段。而且有些性能问题，比如慢查询等，如果积累到一定的程度或者是遇到急速上升的并发请求之后，会导致严重的后果，轻则造成服务繁忙，重则导致应用不可用。它对我们来说就像一颗即将被引爆的定时炸弹一样，时刻威胁着我们。因此在上线项目之前需要严格的把关，以确保 MySQL 能够以最优的状态进行运行。同时，在实际工作中还有面试中关于 MySQL 优化的知识点，都是面试官考察的重点内容。</p><p>我们本课时的面试题是，MySQL 的优化方案有哪些？</p><h2 id="典型回答"><a href="#典型回答" class="headerlink" title="典型回答"></a>典型回答</h2><p>MySQL 数据库常见的优化手段分为三个层面：<strong>SQL和索引优化</strong>、<strong>数据库结构优化</strong>、<strong>系统硬件优化</strong>等，然而每个大的方向中又包含多个小的优化点，下面我们具体来看看。</p><h3 id="1-SQL-和索引优化"><a href="#1-SQL-和索引优化" class="headerlink" title="1.SQL 和索引优化"></a>1.SQL 和索引优化</h3><p>此优化方案指的是通过优化 SQL 语句以及索引来提高 MySQL 数据库的运行效率，具体内容如下。</p><h4 id="1-使用正确的索引"><a href="#1-使用正确的索引" class="headerlink" title="1.使用正确的索引"></a>1.使用正确的索引</h4><p>索引是数据库中最重要的概念之一，也是提高数据库性能最有效的手段之一，它的诞生本身就是为了提高数据查询效率的，就像字典的目录一样，通过目录可以很快找到相关的内容。</p><p>假如我们没有添加索引，那么在查询时就会触发全表扫描，因此查询的数据就会很多，并且查询效率会很低，为了提高查询的性能，我们就需要给最常使用的查询字段上，添加相应的索引，这样才能提高查询的性能。</p><blockquote><p>小贴士：我们应该尽可能的使用主键查询，而非其他索引查询，因为主键查询不会触发回表查询，因此节省了一部分时间，变相的提高了查询的性能。</p></blockquote><p>在 MySQL 5.0 之前的版本要尽量避免使用 or 查询，可以使用 union 或者子查询来替代，因为早期的 MySQL 版本使用 or 查询可能会导致索引失效，在 MySQL 5.0 之后的版本中引入了索引合并，简单来说就是把多条件查询，比如 or 或 and 查询的结果集进行合并交集或并集的功能，因此就不会导致索引失效的问题了。</p><p>避免在 where 查询条件中使用 != 或者 &lt;&gt; 操作符，因为这些操作符会导致查询引擎放弃索引而进行全表扫描。</p><p>适当使用前缀索引，MySQL 是支持前缀索引的，也就是说我们可以定义字符串的一部分来作为索引。我们知道索引越长占用的磁盘空间就越大，那么在相同数据页中能放下的索引值也就越少，这就意味着搜索索引需要的查询时间也就越长，进而查询的效率就会降低，所以我们可以适当的选择使用前缀索引，以减少空间的占用和提高查询效率。比如，邮箱的后缀都是固定的“@xxx.com”，那么类似这种后面几位为固定值的字段就非常适合定义为前缀索引。</p><h4 id="2-查询具体的字段而非全部字段"><a href="#2-查询具体的字段而非全部字段" class="headerlink" title="2.查询具体的字段而非全部字段"></a>2.查询具体的字段而非全部字段</h4><p>要尽量避免使用 select *，而是查询需要的字段，这样可以提升速度，以及减少网络传输的带宽压力。</p><h4 id="3-优化子查询"><a href="#3-优化子查询" class="headerlink" title="3.优化子查询"></a>3.优化子查询</h4><p>尽量使用 Join 语句来替代子查询，因为子查询是嵌套查询，而嵌套查询会新创建一张临时表，而临时表的创建与销毁会占用一定的系统资源以及花费一定的时间，但 Join 语句并不会创建临时表，因此性能会更高。</p><h4 id="4-注意查询结果集"><a href="#4-注意查询结果集" class="headerlink" title="4.注意查询结果集"></a>4.注意查询结果集</h4><p>我们要尽量使用小表驱动大表的方式进行查询，也就是如果 B 表的数据小于 A 表的数据，那执行的顺序就是先查 B 表再查 A 表，具体查询语句如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> name <span class="token keyword">from</span> A <span class="token keyword">where</span> id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> B<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-不要在列上进行运算操作"><a href="#5-不要在列上进行运算操作" class="headerlink" title="5.不要在列上进行运算操作"></a>5.不要在列上进行运算操作</h4><p>不要在列字段上进行算术运算或其他表达式运算，否则可能会导致查询引擎无法正确使用索引，从而影响了查询的效率。</p><h4 id="6-适当增加冗余字段"><a href="#6-适当增加冗余字段" class="headerlink" title="6.适当增加冗余字段"></a>6.适当增加冗余字段</h4><p>增加冗余字段可以减少大量的连表查询，因为多张表的连表查询性能很低，所有可以适当的增加冗余字段，以减少多张表的关联查询，这是以空间换时间的优化策略。</p><h3 id="2-数据库结构优化"><a href="#2-数据库结构优化" class="headerlink" title="2.数据库结构优化"></a>2.数据库结构优化</h3><h4 id="1-最小数据长度"><a href="#1-最小数据长度" class="headerlink" title="1.最小数据长度"></a>1.最小数据长度</h4><p>一般说来数据库的表越小，那么它的查询速度就越快，因此为了提高表的效率，应该将表的字段设置的尽可能小，比如身份证号，可以设置为 char(18) 就不要设置为 varchar(18)。</p><h4 id="2-使用最简单数据类型"><a href="#2-使用最简单数据类型" class="headerlink" title="2.使用最简单数据类型"></a>2.使用最简单数据类型</h4><p>能使用 int 类型就不要使用 varchar 类型，因为 int 类型比 varchar 类型的查询效率更高。</p><h4 id="3-尽量少定义-text-类型"><a href="#3-尽量少定义-text-类型" class="headerlink" title="3.尽量少定义 text 类型"></a>3.尽量少定义 text 类型</h4><p>text 类型的查询效率很低，如果必须要使用 text 定义字段，可以把此字段分离成子表，需要查询此字段时使用联合查询，这样可以提高主表的查询效率。</p><h4 id="4-适当分表、分库策略"><a href="#4-适当分表、分库策略" class="headerlink" title="4.适当分表、分库策略"></a>4.适当分表、分库策略</h4><p>分表和分库方案也是我们经常说的垂直分隔（分表）和水平分隔（分库）。</p><p><strong>分表</strong>是指当一张表中的字段更多时，可以尝试将一张大表拆分为多张子表，把使用比较高频的主信息放入主表中，其他的放入子表，这样我们大部分查询只需要查询字段更少的主表就可以完成了，从而有效的提高了查询的效率。</p><p><strong>分库</strong>是指将一个数据库分为多个数据库。比如我们把一个数据库拆分为了多个数据库，一个主数据库用于写入和修改数据，其他的用于同步主数据并提供给客户端查询，这样就把一个库的读和写的压力，分摊给了多个库，从而提高了数据库整体的运行效率。</p><h3 id="3-硬件优化"><a href="#3-硬件优化" class="headerlink" title="3.硬件优化"></a>3.硬件优化</h3><p>MySQL 对硬件的要求主要体现在三个方面：磁盘、网络和内存。</p><h4 id="1-磁盘"><a href="#1-磁盘" class="headerlink" title="1.磁盘"></a>1.磁盘</h4><p>磁盘应该尽量使用有高性能读写能力的磁盘，比如固态硬盘，这样就可以减少 I/O 运行的时间，从而提高了 MySQL 整体的运行效率。</p><p>磁盘也可以尽量使用多个小磁盘而不是一个大磁盘，因为磁盘的转速是固定的，有多个小磁盘就相当于拥有多个并行运行的磁盘一样。</p><h4 id="2-网络"><a href="#2-网络" class="headerlink" title="2.网络"></a>2.网络</h4><p>保证网络带宽的通畅（低延迟）以及够大的网络带宽是 MySQL 正常运行的基本条件，如果条件允许的话也可以设置多个网卡，以提高网络高峰期 MySQL 服务器的运行效率。</p><h4 id="3-内存"><a href="#3-内存" class="headerlink" title="3.内存"></a>3.内存</h4><p>MySQL 服务器的内存越大，那么存储和缓存的信息也就越多，而内存的性能是非常高的，从而提高了整个 MySQL 的运行效率。</p><h2 id="考点分析"><a href="#考点分析" class="headerlink" title="考点分析"></a>考点分析</h2><p>MySQL 性能优化的方案很多，因此它可以全面考察的一个程序员的经验是否丰富。当然这个问题的回答也是可深可浅，不同的岗位对此问题的答案要求也是不同的，这个问题也可以引申出更多的面试问题，比如：</p><ul><li>联合索引需要注意什么问题？</li><li>如何排查慢查询？</li></ul><h1 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a>知识扩展</h1><h2 id="正确使用联合索引"><a href="#正确使用联合索引" class="headerlink" title="正确使用联合索引"></a>正确使用联合索引</h2><p>使用了 B+ 树的 MySQL 数据库引擎，比如 InnoDB 引擎，在每次查询复合字段时是从左往右匹配数据的，因此在创建联合索引的时候需要注意索引创建的顺序。例如，我们创建了一个联合索引是 idx(name,age,sex)，那么当我们使用，姓名+年龄+性别、姓名+年龄、姓名等这种最左前缀查询条件时，就会触发联合索引进行查询；然而如果非最左匹配的查询条件，例如，性别+姓名这种查询条件就不会触发联合索引。</p><p>当然，当我们已经有了（name,age）这个联合索引之后，一般情况下就不需要在 name 字段单独创建索引了，这样就可以少维护一个索引。</p><h2 id="慢查询"><a href="#慢查询" class="headerlink" title="慢查询"></a>慢查询</h2><p>慢查询通常的排查手段是先使用慢查询日志功能，查询出比较慢的 SQL 语句，然后再通过 explain 来查询 SQL 语句的执行计划，最后分析并定位出问题的根源，再进行处理。</p><p>慢查询日志指的是在 MySQL 中可以通过配置来开启慢查询日志的记录功能，超过 long_query_time 值的 SQL 将会被记录在日志中。我们可以通过设置“slow_query_log=1”来开启慢查询，它的开启方式有两种：</p><ul><li>通过 MySQL 命令行的模式进行开启，只需要执行“set global slow_query_log=1”即可，然而这种配置模式再重启 MySQL 服务之后就会失效；</li><li>另一种方式可通过修改 MySQL 配置文件的方式进行开启，我们需要配置 my.cnf 中的“slow_query_log=1”即可，并且可以通过设置“slow_query_log_file=/tmp/mysql_slow.log”来配置慢查询日志的存储目录，但这种方式配置完成之后需要重启 MySQL 服务器才可生效。</li></ul><p>需要注意的是，在开启慢日志功能之后，会对 MySQL 的性能造成一定的影响，因此在生产环境中要慎用此功能。</p><p>explain 执行计划的使用示例 SQL 如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> person <span class="token keyword">where</span> uname <span class="token operator">=</span> <span class="token string">'Java'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>它的执行结果如下图所示：</p><p><img src="./medias/detail/load.gif" data-original="https://cdn.jsdelivr.net/gh/krislinzhao/IMGcloud/img/20200615205146.png"></p><p>摘要说明如下表所示：</p><p><img src="./medias/detail/load.gif" data-original="https://cdn.jsdelivr.net/gh/krislinzhao/IMGcloud/img/20200615205237.png"></p><p>以上字段中最重要的就是 type 字段，它的所有值如下所示：</p><p><img src="./medias/detail/load.gif" data-original="https://cdn.jsdelivr.net/gh/krislinzhao/IMGcloud/img/20200615205327.png"></p><p>当 type 为 all 时，则表示全表扫描，因此效率会比较低，此时需要查看一下为什么会造成此种原因，是没有创建索引还是索引创建的有问题？以此来优化整个 MySQL 运行的速度。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本课时我们从三个维度讲了 MySQL 的优化手段：SQL 和索引优化、数据库结构优化以及系统硬件优化等；同时深入到每个维度中，详细地介绍了 MySQL 具体的优化细节；最后我们讲了联合索引的最左匹配原则，以及慢查询的具体解决方案。</p>]]></content>
      
      
      <categories>
          
          <category> 码一片天 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> mysql优化 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈开源镜像站</title>
      <link href="posts/35737.html"/>
      <url>posts/35737.html</url>
      
        <content type="html"><![CDATA[<h1 id="谈谈开源镜像站"><a href="#谈谈开源镜像站" class="headerlink" title="谈谈开源镜像站"></a>谈谈开源镜像站</h1><p>我们日常使用的操作系统、应用软件在更新的时候都需要从上游服务器拉取数据，这个所谓的上游服务器也叫做「源」。由于种种原因，一些私有云平台会搭建自己的镜像站，避免因网络问题导致更新受阻，保障公司内部的机器运转正常。</p><p>挑选一个好的镜像站非常重要，通常要从稳定性、健康度和速度三个方面来综合比较。METO 为此搭建了一个<a href="https://api.i-meto.com/mirrors.page">监控平台</a>，平台使用爬虫 24 小时监控各大镜像站的连接性以及同步时效。</p><p>在中国（除港澳台地区），<del>由于中美之间持续的贸易战导致</del>国际链路一直不太稳定，所以也出现了很多对公网开放的镜像站。大致分为两类，下面列出一些比较有代表的镜像站。</p><p>高校开源镜像站：</p><table><thead><tr><th>清华大学</th><th>mirrors.tuna.tsinghua.edu.cn</th></tr></thead><tbody><tr><td>中国科学技术大学</td><td>mirrors.ustc.edu.cn</td></tr><tr><td>上海交通大学</td><td>ftp.sjtu.edu.cn</td></tr><tr><td>上海大学</td><td>mirrors.shu.edu.cn</td></tr></tbody></table><p>企业开源镜像站：</p><table><thead><tr><th>阿里云</th><th>mirrors.aliyun.com</th></tr></thead><tbody><tr><td>腾讯云</td><td>mirrors.cloud.tencent.com</td></tr><tr><td>华为云</td><td>mirrors.huaweicloud.com</td></tr><tr><td>网易</td><td>mirrors.cn99.com</td></tr><tr><td>首都在线</td><td>mirrors.yun-idc.com</td></tr></tbody></table><h2 id="国外"><a href="#国外" class="headerlink" title="国外"></a>国外</h2><p>国外（境外）的镜像站则大致可以分为三类。</p><p>高校开源镜像站：</p><table><thead><tr><th>The Chinese University of Hong Kong</th><th>ftp.cuhk.edu.hk</th></tr></thead><tbody><tr><td>元智大學</td><td>ftp.yzu.edu.tw</td></tr><tr><td>Massachusetts Institute of Technology</td><td>mirrors.mit.edu</td></tr></tbody></table><p>云服务商开源镜像站：</p><table><thead><tr><th>Digital Ocean</th><th>mirrors.digitalocean.com</th></tr></thead><tbody><tr><td>Linode</td><td>mirrors.linode.com</td></tr><tr><td>Cat Networks</td><td>mirrors.cat.net</td></tr></tbody></table><p>公益开源镜像站：</p><table><thead><tr><th>Kernel ORG</th><th>mirrors.kernel.org</th></tr></thead><tbody><tr><td>Yandex</td><td>mirror.yandex.ru</td></tr></tbody></table><h2 id="评测"><a href="#评测" class="headerlink" title="评测"></a>评测</h2><p>更新时间：2019-03-01</p><p>由于更新时效性，推荐大家在「镜像源监控平台」查看详细结果。<a href="https://api.i-meto.com/mirrors.page">https://api.i-meto.com/mirrors.page</a></p><p><strong>最稳定且覆盖全面的镜像站：</strong></p><p><img src="./medias/detail/load.gif" data-original="https://img11.360buyimg.com/img/jfs/t1/28911/9/8771/36823/5c7948f9Ed6c9a7d9/be925cd98be4dc21.png" alt="img"><a href="http://mirrors.tuna.tsinghua.edu.cn/">http://mirrors.tuna.tsinghua.edu.cn/</a></p><p><img src="./medias/detail/load.gif" data-original="https://img12.360buyimg.com/img/jfs/t1/15800/34/8749/29908/5c79493eEb670294e/7466136f10555dd0.png" alt="img"><a href="http://mirror.xtom.com.hk/">http://mirror.xtom.com.hk/</a></p><p><img src="./medias/detail/load.gif" data-original="https://img11.360buyimg.com/img/jfs/t1/17303/12/8805/29696/5c794977E6385ea7d/a697016c6047532d.png" alt="img"><a href="http://mirrors.cat.net/">http://mirrors.cat.net/</a></p><p><img src="./medias/detail/load.gif" data-original="https://img20.360buyimg.com/img/jfs/t1/11626/15/9567/29616/5c7949a6Ee816ebef/adb719b7407071e6.png" alt="img"><a href="http://mirror.yandex.ru/">http://mirror.yandex.ru/</a></p><p><strong>最不用心的镜像站：</strong></p><p><img src="./medias/detail/load.gif" data-original="https://img30.360buyimg.com/img/jfs/t1/29491/19/8784/29673/5c794a04Ede118320/83faf36783f3e2e8.png" alt="img"><a href="http://mirrors.sohu.com/">http://mirrors.sohu.com/</a></p><p><img src="./medias/detail/load.gif" data-original="https://img12.360buyimg.com/img/jfs/t1/11246/27/9634/30056/5c794a46Ee7eacb1a/95d10aae38aa80ef.png" alt="img"><a href="http://mirrors.ctyun.cn/">http://mirrors.ctyun.cn/</a></p>]]></content>
      
      
      <categories>
          
          <category> 记一件事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 镜像站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《监视资本主义》:智能陷阱和《黑客与画家》</title>
      <link href="posts/35683.html"/>
      <url>posts/35683.html</url>
      
        <content type="html"><![CDATA[<p><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2021/09/03/cYWU4EIlxJAVr3k.png"></p><p>碰巧连着看完了两“对立”的内容——书《黑客与画家》和纪录片《监视资本主义：智能陷阱》，它们分别站在碳基和硅基两边。</p><p>《黑客与画家》站在比特这边，相信开放、自由、普惠、叛逆并充满美感的信息世界有着光明的未来，相信深度的抽象逻辑和简单的设计理念能更好地改变世界，最典型的代表是那些浪潮之巅的互联网公司，它们让世界更美更富足。</p><p><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2021/09/03/bLgC9xYEd6suptT.png" alt="image-20210903190056852"></p><p>《监视资本主义：智能陷阱》站在原子这边，认为比特正在侵袭原子世界，认为互联网是一个交易“人类”期货的市场，人类由于让渡注意力后被控制，成为没有自主人格的货物，被不必要的点赞期许折磨，被放大后的孤独感包围，导致身心持续遭受摧残，引发失眠、精神衰落等一系列问题。更有甚者，由于算法推送天然容易形成一个过度拟合的信息囚笼，部分人可能深陷谎言、假象等负面叙事不能自拔，从而做出过激行为。</p><p>世界是信息和能量的聚合体，现在的问题是信息世界进化得太快，能量世界跟不上。对于比特的担忧，核心在于未来会不会形成一个超级信息中心体，这个中心体高效地主导着一切push，如果它足够智能后有了自由意志，原子世界将成为比特世界的子世界，被永远控制。</p><p>从量子的视角看，世界是各种波组成的分布，没有只峰不谷。孤独往往来自狂欢之后，痛苦来自对欢乐的念念不忘。每个人眼中的世界该不该是一样的？都是希特勒的世界怎么办，还有人总觉得地球是平的怎么办……这些都该辩证地去看，《监视资本主义：智能陷阱》里有些观点和画面都太偏激，“伤春悲秋”都是看“一体”不见“两面”，始终以辩证的视角观察世界是防止自己变成“拿锤看钉”者的有效手段。</p><p>看完《黑客与画家》还有一个感受：选择比努力重要，创作比选择精彩，选择的博弈是有限的，创作的表达是无限的，那些奋不顾身的创作者是最绚烂的彩虹，独特超前的审美趣味让世界不再单调。</p><p><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2021/09/03/kf62iH9xbYBZ5pe.png" alt="image-20210903190021415"></p>]]></content>
      
      
      <categories>
          
          <category> 感一点悟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 黑客与画家 </tag>
            
            <tag> 监视资本主义:智能陷阱 </tag>
            
            <tag> 观后感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+github搭建博客(踩坑记录)</title>
      <link href="posts/32712.html"/>
      <url>posts/32712.html</url>
      
        <content type="html"><![CDATA[<p><strong>前言</strong></p><p>搭建这个hexo博客因为现在的服务器带宽太低，wordpress+现在这个主题又比较重 所以搭建一个hexo来作为备份使用</p><h1 id="1-1-准备工作"><a href="#1-1-准备工作" class="headerlink" title="1.1 准备工作"></a>1.1 准备工作</h1><ul><li>有一个github账号</li><li>安装了node.js、npm</li><li>安装了git for windows（或者其它git客户端）</li></ul><p>本文所用环境：</p><ul><li>Windows10</li><li>node.js v14.16.1 (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li><li>npm 6.13.4</li><li>git version 2.28.0.windows.1</li><li><a href="mailto:hexo@5.0">hexo@5.0</a>+</li></ul><h1 id="2-1-安装hexo"><a href="#2-1-安装hexo" class="headerlink" title="2.1 安装hexo"></a>2.1 安装hexo</h1><p>Hexo就是我们的个人博客网站的框架， 新建一个文件夹名称可以任意，然后在此路径打开cmd命令行工具。</p><p><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2021/09/03/N2yqrH5Wtjp8JDE.png" alt="1630590752615"></p><p>使用npm命令安装Hexo，输入：(如果安装较慢可以换淘宝源)</p><pre class="line-numbers language-npm" data-language="npm"><code class="language-npm">npm install -g hexo-cli <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成后，初始化我们的博客，输入：</p><pre class="line-numbers language-none"><code class="language-none">hexo init blog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2021/09/03/haXdiUN4bflqFmQ.png" alt="1630590885109"></p><p>为了检测我们的网站雏形，分别按顺序输入以下三条命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new test_my_sitehexo ghexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2021/09/03/zxVUbdSGmK2qMrC.png" alt="1630590998369"></p><p><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2021/09/03/8ujImMi2GdacSVL.png" alt="1630591020160"></p><p>这个时候我们就可以访问 localhost:4000来看到我们刚发布的文章了</p><h2 id="2-2-配置git和github"><a href="#2-2-配置git和github" class="headerlink" title="2.2 配置git和github"></a>2.2 配置git和github</h2><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">这里有个很大的坑，如果是看以前的教程 在hexo d部署的时候一定会报错，这是因为github在8月13日之后不支持用账号密码的方式部署了 所以我们要去申请token 并且修改配置文件git仓库格式<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2021/09/03/dRXkT2CxlzLM3Nh.png" alt="1630596468908"></p><h3 id="申请token"><a href="#申请token" class="headerlink" title="申请token"></a>申请token</h3><p>首先到设置页面 进入Developer setting</p><p><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2021/09/03/yBQzhwjGTKV7PLS.png" alt="1630596579235"></p><h2 id="2-3-将网站部署到github"><a href="#2-3-将网站部署到github" class="headerlink" title="2.3 将网站部署到github"></a>2.3 将网站部署到github</h2><p>在推送到github之前请先确认配置好了git和github的ssh设置</p><p>在git bash中设置基本信息：</p><pre class="line-numbers language-none"><code class="language-none">git config --global user.name "你的GitHub用户名"git config --global user.email "你的GitHub注册邮箱"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>生成ssh密匙文件：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">ssh-keygen -t rsa -C "你的GitHub注册邮箱"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后找到生成的.ssh的文件夹中的id_rsa.pub密钥，将内容全部复制</p><p>在github-settings中New SSH Key 新建将刚复制的内容全部粘贴进去即可</p><p><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2021/09/03/M2yJBcGwIsR7i3j.png" alt="1630591376012"></p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">库名应该为：用户名.github.io 这个用户名使用你的GitHub帐号名称代替，这是固定写法，比如我的仓库名为这里一定要注意！！！这里一定要注意！！！这里一定要注意！！！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2021/09/03/LjvimCTkUs9l8MR.png" alt="1630594311042"></p><p>现在回到hexo的配置：</p><p>刚才只是在本地预览，接下来要做的就是就是推送网站，也就是发布网站，让我们的网站可以被更多的人访问。在设置之前，需要解释一个概念，在blog根目录里的_config.yml文件称为<strong>站点</strong>配置文件，如下图</p><p><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2021/09/03/ubhQxEU9sOIDPtl.png" alt="1630591467484"></p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">！！！这里要注意 如果看以前的老教程就不会修改格式原来的配置为：deploy:    type: git    repo: https://github.com/{yourname}/{yourname}.github.io.git    branch: master修改为如下：deploy:   type: git   repo: https://{yourname}:{这里写token}@github.com/{yourname}/{yourname}.github.io.git   branch: master具体可以参照我下面的地址 loser7659为我的用户名 后面则是刚才生成的token信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2021/09/03/Rly8q7AhZ9igura.png" alt="1630596852812"></p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">在这里修改你的网站标题以及个人信息title: Echo-Blog #网站标题subtitle: ''     #网站副标题description: ''  #描述keywords:        #关键词author: John Doe #作者名language: en     #网站语言timezone: ''     #时区description：主要用于SEO，告诉搜索引擎一个关于站点的简单描述，在官方文档中建议在这段描述中增加自己的一些关键词，总之我写了之后是在网页中找不到我写的描述，可能是这个主题里面没把描述写出来，也可能我没看到keywords：网站的关键词，使用半角逗号分隔开多个关键词，关键词对SEO的优化有一定的作用author：顾名思义就是作者，这个也只是署个名而已language：这里就写了网站使用的语言timezone：网站对应的时区，一般情况下不用去刻意配置，会默认使用电脑的时区，但如果发布到其他地方的服务器，可能会使用当地服务器的时区，此时如果有需要用到本电脑的时区就要手动设置时区了，一般中国的时区可以设置为Asia/Shanghai更多详细配置可以访问:https://hexo.io/zh-cn/docs/configuration.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2021/09/03/ygFpt4MPO9ADXIn.png" alt="1630592251331"></p><p>最后我们还需要安装git部署插件：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再上传到git之前我们可以修改自己喜欢的主题 我这里用的是islu，我们先去下载自己喜欢的主题压缩包然后将主题文件夹放到themes 目录 然后打开主题目录下的 _config.yml文件</p><p><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2021/09/03/5LGvR21KoSzeTj6.png" alt="1630592545303"></p><p>配置根据自己的信息来修改即可，一定记得修改git仓库地址</p><p><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2021/09/03/Mf7UQecdWbrsGBk.png" alt="1630592616931"></p><p>然后我们将根目录下的_config.yml中theme 换成新的主题名</p><p><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2021/09/03/m1aEJozeNrh7UyK.png" alt="1630593040136"></p><p>现在差不多已经配置完成，我们执行下面3条命令</p><pre class="line-numbers language-te" data-language="te"><code class="language-te">hexo clean hexo g hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行完成我们就可以去github仓库看刚部署的文件有没有上传成功了</p><p><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2021/09/03/q4lUKAv7dWDPz3a.png" alt="1630593914133"></p><p>打开浏览器，在地址栏输入你的放置个人网站的仓库路径，即 <a href="https://link.zhihu.com/?target=http://xxxx.github.io">xxxx.github.io</a> 比如我的xxxx就是我的GitHub用户</p><p><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2021/09/03/L6AeQ1BXOwEyDsI.png" alt="1630597375952"></p><p>到此部署就已经完成啦 接下来我们解析域名</p><h1 id="3-域名解析"><a href="#3-域名解析" class="headerlink" title="3 域名解析"></a>3 域名解析</h1><p>我们先ping一下github的域名地址 </p><p><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2021/09/03/ZhCbU7uxWQs2jcm.png" alt="1630597479641"></p><p>然后去域名解析处添加解析记录</p><ul><li>CNAME记录的记录值设置成域名，也就是你的github主页loser7659.github.io</li><li>A记录的记录值设置成IP地址，也就是我们刚才ping查询出来的IP地址</li></ul><p>这是我的解析记录</p><p><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2021/09/03/Nzjg48tmPKy1TCB.png" alt="1630597993388"></p><h3 id="CNAME文件"><a href="#CNAME文件" class="headerlink" title="CNAME文件"></a>CNAME文件</h3><p>最后在yourusername.github.io仓库根目录下新增一个文件命名为CNAME(注意不要后缀名)，内容设置为申请的域名<a href="http://www.loserk.xyz/">www.loserk.xyz</a></p><p>也可以在hexo个目录/public目录下新郑CNAME文件，然后再重新部署上传到GitHub</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">最后有一点要注意 一开始我是把CNAME文件直接放在hexo/public目录下，但是每次执行hexo clean后就会被删除后来改成在GitHub项目的Settings-&gt;Options-&gt;GitHub Pages的Custom domain中设置域名，如下图所示，但是这种方法和上面的其实没什么差别，也是会在GitHub项目根目录下（也就是Hexo的public目录下）生成一个CNAME文件，在执行hexo clean后该文件还是会被删除<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2021/09/03/px21DiWJgqIl9ow.png" alt="1630598555037"></p><p>这是因为整个public文件夹是执行hexo g后生成的，若执行hexo clean会把整个public连同CNAME文件夹删掉，在重新执行hexo g后生成的public文件夹里肯定没有我们手动添加的CNAME文件</p><p>解决方法是把CNAME文件放在source文件夹下，而不是public文件夹，在执行hexo g命令时，会把source文件夹下的CNAME文件原原本本地复制到public文件夹下，即使执行hexo clean后，下次重新编译还是会复制过去，这样就解决了问题。</p><p>其实还有很多其他的文件如果想编译后放在public文件夹下，都可以先放source文件夹下，在hexo g编译后就会复制到public文件夹下</p><p>解析完域名就可以直接用我们自己的域名去访问了,如果有需要也可以去github pages下开启https</p><p><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2021/09/03/ZMkOTyewlRIJAcK.png" alt="1630633140053"></p><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>到这里也就全部部署完了,一路踩了不少坑 也没注意github以及hexo的更新日志 所以大家平时还是可以多注意一下官方的更新日志以及公告</p><p>生命在于折腾！！！</p>]]></content>
      
      
      <categories>
          
          <category> 记一件事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>teste</title>
      <link href="posts/14264.html"/>
      <url>posts/14264.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 感一点悟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test2</title>
      <link href="posts/51705.html"/>
      <url>posts/51705.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署教程</title>
      <link href="posts/2483.html"/>
      <url>posts/2483.html</url>
      
        <content type="html"><![CDATA[<ol><li>下载主题</li><li>运行<code>npm i</code>自动安装所需依赖</li><li>更改个人信息及所需配置</li><li>更改<code>_config.yml</code> 中 <code>deploy</code> 仓库地址</li><li>运行<code>hexo cl&amp;&amp;hexo g&amp;&amp;hexo d</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> 从一开始 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>essay-life</title>
      <link href="posts/980.html"/>
      <url>posts/980.html</url>
      
        <content type="html"><![CDATA[<div class="ipage">    <div class="ititle">节选自《你若安好便是晴天》- 前言</div>    <div class="izhengwen">        <p>生活，有时感觉莫名的心烦。心烦的时候，最好的是沉默。</p>        <p>不必喝酒，出去走走，那小路和树林，那天空和海滩，那山风和淡云，就在身旁；</p>        <p>不必多怨，言多不逊，执一本书，在阳光下，微笑着面对一切，聆听一切；</p>        <p>不必伤怀，曲折有度，也许过了就算了，算了就消失了。</p>        <p>心烦，其实只是人的一种心情，看淡了，就习惯了。</p>        <p>生活，有时真的让人无语，令人心碎。</p>        <p>只是，既是自己选择的路，跪着也要走下去。</p>        <p>自己扛下的事，留着泪也要做好。</p>        <p>而有些情，舍不得也得放下，哪怕心再痛再苦。</p>        <p>其实，缘来缘去的个中滋味，只有岁月懂得，也只有自己深深懂得!</p>        <p>生活，有时候其实很简单。</p>        <p>生活，不过是一份发自内心的微笑；</p>        <p>是一种清淡如水的心态，对苦难，对幸福，对整个人生；</p>        <p>更是一本永远也读不完的书，有故事，有梦想，有难以言说的情怀。</p>        <p>倘若有天，在一个阳光温热的午后，树荫下，你会发现：净是如此美丽 !</p>        <p>亲爱的，很多时候不是生活抛弃了你，而是你抛弃了生活本身。</p>    </div></div>]]></content>
      
      
      <categories>
          
          <category> 记一件事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 请相信生活 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
